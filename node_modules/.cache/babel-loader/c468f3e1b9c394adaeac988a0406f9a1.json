{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deepForceUpdate;\n\nfunction traverseRenderedChildren(internalInstance, callback, argument) {\n  callback(internalInstance, argument);\n\n  if (internalInstance._renderedComponent) {\n    traverseRenderedChildren(internalInstance._renderedComponent, callback, argument);\n  } else {\n    for (var key in internalInstance._renderedChildren) {\n      if (internalInstance._renderedChildren.hasOwnProperty(key)) {\n        traverseRenderedChildren(internalInstance._renderedChildren[key], callback, argument);\n      }\n    }\n  }\n}\n\nfunction setPendingForceUpdate(internalInstance, shouldUpdate) {\n  if (internalInstance._pendingForceUpdate === false && shouldUpdate(internalInstance)) {\n    internalInstance._pendingForceUpdate = true;\n  }\n}\n\nfunction forceUpdateIfPending(internalInstance, onUpdate) {\n  if (internalInstance._pendingForceUpdate === true) {\n    var publicInstance = internalInstance._instance;\n    var updater = publicInstance.updater;\n\n    if (typeof publicInstance.forceUpdate === 'function') {\n      publicInstance.forceUpdate();\n    } else if (updater && typeof updater.enqueueForceUpdate === 'function') {\n      updater.enqueueForceUpdate(publicInstance);\n    }\n\n    onUpdate(internalInstance);\n  }\n}\n\nfunction deepForceUpdateStack(instance, shouldUpdate, onUpdate) {\n  var internalInstance = instance._reactInternalInstance;\n  traverseRenderedChildren(internalInstance, setPendingForceUpdate, shouldUpdate);\n  traverseRenderedChildren(internalInstance, forceUpdateIfPending, onUpdate);\n}\n\nfunction deepForceUpdate(instance) {\n  // TODO: this is temporarily disabled because it's not in 2.x release line.\n  // See https://github.com/gaearon/react-deep-force-update/issues/8\n  var shouldUpdate = function shouldUpdate() {\n    return true;\n  };\n\n  var onUpdate = function onUpdate() {};\n\n  var root = instance._reactInternalFiber || instance._reactInternalInstance;\n\n  if (typeof root.tag !== 'number') {\n    // Traverse stack-based React tree.\n    return deepForceUpdateStack(instance, shouldUpdate, onUpdate);\n  }\n\n  var node = root;\n\n  while (true) {\n    if (node.stateNode !== null && typeof node.type === 'function' && shouldUpdate(node)) {\n      var publicInstance = node.stateNode;\n      var updater = publicInstance.updater;\n\n      if (typeof publicInstance.forceUpdate === 'function') {\n        publicInstance.forceUpdate();\n      } else if (updater && typeof updater.enqueueForceUpdate === 'function') {\n        updater.enqueueForceUpdate(publicInstance);\n      }\n\n      onUpdate(node);\n    }\n\n    if (node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === root) {\n      return undefined;\n    }\n\n    while (!node.sibling) {\n      if (!node.return || node.return === root) {\n        return undefined;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}